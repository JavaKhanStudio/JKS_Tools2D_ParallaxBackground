apply plugin: "java"

sourceCompatibility = 1.11
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.mygdx.game.desktop.Main_FYP_Game"
project.ext.assetsDir = new File("../test/assets");

sourceSets 
{
    main 
    {
        java 
        {
            srcDir 'src'
            srcDir 'assets'
            srcDir 'mains'   
            srcDir 'ImageCutter'          
        }
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest 
    {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse 
{
    project 
    {
        name = appName + "_Test"
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast 
  {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
