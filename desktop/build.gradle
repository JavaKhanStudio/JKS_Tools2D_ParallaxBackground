apply plugin: "java"

sourceCompatibility = 1.8
sourceSets 
{
    main 
    {
        java 
        {
            srcDir 'src'
            srcDir 'assets'     
        }
    }
}

project.ext.mainClassName = "jks.tools2d.parallax.desktop.DesktopLauncher_Editor"
project.ext.assetsDir = new File("../desktop/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

task javaPackager(type : Exec, dependsOn : dist) {
	workingDir project.projectDir
	def commands = [
        'javapackager',
        '-deploy',
        '-nosign',
        '-outdir', "${buildDir}/distribution",
        '-srcdir', "${buildDir}/libs",
        '-native', 'image',
        '-outfile', 'testing',
        '-name', project.appName,
        '-appclass', project.mainClassName
    ]
    
    def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    if (osName.contains('windows')) {
        commands << "-Bicon=${project.projectDir}/logo.ico"
    } else if (osName.contains('linux')) {
        commands << "-Bicon=${project.projectDir}/logo.png"
    } else if (osName.contains('mac')) {
        commands << "-Bicon=${project.projectDir}/logo.icns"
        commands << "-BjvmOptions=-XstartOnFirstThread"
    }
    
    commandLine = commands
}


// removes bloated runtime created by javapackager
task cleanPackagerRuntime(dependsOn: javaPackager) {
    doLast() {
        File runtimeFile = new File("${buildDir}/distribution/${project.appName}/runtime")
        runtimeFile.deleteDir()
        System.out.println("deleting bloated runtime in " + runtimeFile)
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackager)
task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {
    def jdk = System.getProperty("java.home")

    workingDir project.projectDir
    commandLine = [
        'jlink',
        '-p', "${jdk}/jmods",
        '--add-modules', 'java.base,java.desktop,jdk.unsupported',
        '--strip-debug',
        '--no-header-files',
        '--no-man-pages',
        '--strip-native-commands',
        "--vm=server",
        "--compress=2",
        '--output', "${buildDir}/distribution/${project.appName}/runtime"
    ]

    doLast{
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${buildDir}/distribution/${project.name}/")
    }
}


eclipse {
    project {
        name = appName + "_Desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/desktop/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}